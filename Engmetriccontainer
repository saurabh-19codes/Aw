import React from 'react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { fromJS } from 'immutable';
import { render, fireEvent, screen } from '@testing-library/react';
import EngineeringProductivityMetricsContainer from './EngineeringProductivityMetricsContainer';
import * as redux from 'react-redux';

// Mock all deeply imported children for isolation
jest.mock('../components/AxpDoraMetricsGrid', () => () => <div data-testid="AxpDoraMetricsGrid" />);
jest.mock('../components/AxpEngineeringMetricsGrid', () => () => <div data-testid="AxpEngineeringMetricsGrid" />);
jest.mock('../components/AxpNfrMetricsGridWithFiltersWithE', () => () => <div data-testid="AxpNfrMetricsGridWithFiltersWithE" />);
jest.mock('../components/AxpEngineeringMetricsGridWithFiltersTest', () => () => <div data-testid="AxpEngineeringMetricsGridWithFiltersTest" />);
jest.mock('../components/PageLevelMessage', () => ({ children, ...props }) =>
  <div data-testid="PageLevelMessage" {...props}>{children}</div>
);

const mockStore = configureStore([]);
let store, dispatchMock;

beforeEach(() => {
  dispatchMock = jest.fn();
  jest.spyOn(redux, 'useDispatch').mockReturnValue(dispatchMock);
});

const baseState = fromJS({
  amexway: {
    url: '',
    feedback: {
      showFeedbackMessage: false,
    },
    downloadFeedback: {
      showApiErrorMessage: false,
      showSuccessMessage: false,
    },
  },
});

function renderWithStore(stateOverrides = {}) {
  store = mockStore(baseState.mergeDeep(fromJS(stateOverrides)));
  return render(
    <Provider store={store}>
      <EngineeringProductivityMetricsContainer />
    </Provider>
  );
}

describe('EngineeringProductivityMetricsContainer', () => {
  it('renders all tabs', () => {
    renderWithStore();
    expect(screen.getByText(/Enterprise Productivity Signals/i)).toBeInTheDocument();
    expect(screen.getByText(/DORA Metrics/i)).toBeInTheDocument();
    expect(screen.getByText(/NFR Metrics/i)).toBeInTheDocument();
  });

  it('renders default Enterprise tab content (grid, filter tab)', () => {
    renderWithStore();
    expect(screen.getByText(/Enterprise View/i)).toBeInTheDocument();
    expect(screen.getByTestId('AxpEngineeringMetricsGrid')).toBeInTheDocument();
  });

  it('renders DORA Metrics tab on click', () => {
    renderWithStore();
    fireEvent.click(screen.getByText(/DORA Metrics/i));
    expect(screen.getByTestId('AxpDoraMetricsGrid')).toBeInTheDocument();
  });

  it('renders NFR Metrics tab on click', () => {
    renderWithStore();
    fireEvent.click(screen.getByText(/NFR Metrics/i));
    expect(screen.getByTestId('AxpNfrMetricsGridWithFiltersWithE')).toBeInTheDocument();
  });

  it('shows feedback success message if showFeedbackMessage true', () => {
    renderWithStore({
      amexway: { feedback: { showFeedbackMessage: true } }
    });
    expect(screen.getAllByTestId('PageLevelMessage').some(m => m.textContent.includes('Feedback successfully submitted.'))).toBe(true);
  });

  it('shows download success message if showSuccessMessage true', () => {
    renderWithStore({
      amexway: { downloadFeedback: { showSuccessMessage: true } }
    });
    expect(screen.getAllByTestId('PageLevelMessage').some(m => m.textContent.includes('Feedback downloaded successfully.'))).toBe(true);
  });

  it('shows download API error if showApiErrorMessage true', () => {
    renderWithStore({
      amexway: { downloadFeedback: { showApiErrorMessage: true } }
    });
    expect(screen.getAllByTestId('PageLevelMessage').some(m => m.textContent.includes('Something went wrong'))).toBe(true);
  });

  it('dispatches to hide feedback message when feedback success dismissed', () => {
    renderWithStore({
      amexway: { feedback: { showFeedbackMessage: true } }
    });
    fireEvent.click(screen.getAllByTestId('PageLevelMessage').find(m => m.textContent.includes('Feedback successfully submitted.')));
    expect(dispatchMock).toHaveBeenCalledWith({
      type: 'SET_SHOW_FEEDBACK', payload: false,
    });
  });

  // Edge: No message when false
  it('does not show any PageLevelMessage when all are false', () => {
    renderWithStore();
    // Only "PageLevelMessage" could be present if children show it, but contents will NOT match success/error
    expect(screen.queryAllByTestId('PageLevelMessage').every(
      m => !/Feedback successfully submitted|Feedback downloaded successfully|Something went wrong/.test(m.textContent)
    )).toBe(true);
  });

  // You may add more tests for toggle, callbacks, or links as needed.
});
