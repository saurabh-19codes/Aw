import React from 'react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { render, screen, fireEvent } from '@testing-library/react';
import EngineeringProductivityMetricsContainer from '../EngineeringProductivityMetricsContainer';

// --- MOCKS ---
jest.mock('../components/AxpEngineeringMetricsGrid', () => () => <div data-testid="AxpEngineeringGrid" />);
jest.mock('../components/AxpDoraMetricsGrid', () => () => <div data-testid="AxpDoraGrid" />);
jest.mock('../components/AxpNfrMetricsGridWithFiltersWithE', () => () => <div data-testid="AxpNfrGridWithFiltersE" />);
jest.mock('../components/AxpEngineeringMetricsGridWithFiltersTest', () => () => <div data-testid="AxpEngGridWithFiltersTest" />);
jest.mock('../components/PageLevelMessage', () => ({ type, children, onDismiss }) => 
  <div data-testid={`PageLevelMessage-${type}`} onClick={onDismiss}>{children}</div>
);

const mockStore = configureStore([]);

function renderWithStore(store) {
  return render(
    <Provider store={store}>
      <EngineeringProductivityMetricsContainer />
    </Provider>
  );
}

// For convenience
const baseState = {
  amexway: {
    url: '',
    feedback: { showFeedbackMessage: false },
    downloadFeedback: {
      showApiErrorMessage: false,
      showSuccessMessage: false,
    },
  },
};

describe('EngineeringProductivityMetricsContainer', () => {
  afterEach(() => jest.clearAllMocks());

  it('renders tabs and the default Enterprise tab content', () => {
    const store = mockStore(baseState);
    renderWithStore(store);

    expect(screen.getByText('Enterprise Productivity Signals')).toBeInTheDocument();
    expect(screen.getByText('DORA Metrics')).toBeInTheDocument();
    expect(screen.getByText('NFR Metrics')).toBeInTheDocument();

    // Enterprise content visible
    expect(screen.getByText(/Enterprise View/i)).toBeInTheDocument();
    expect(screen.getByTestId('AxpEngineeringGrid')).toBeInTheDocument();
    expect(screen.getByTestId('AxpEngGridWithFiltersTest')).toBeInTheDocument();
  });

  it('switches to DORA and NFR Metrics tabs and shows correct grids', () => {
    const store = mockStore(baseState);
    renderWithStore(store);

    // Click DORA Metrics
    fireEvent.click(screen.getByText('DORA Metrics'));
    expect(screen.getByTestId('AxpDoraGrid')).toBeInTheDocument();

    // Click NFR Metrics
    fireEvent.click(screen.getByText('NFR Metrics'));
    expect(screen.getByTestId('AxpNfrGridWithFiltersE')).toBeInTheDocument();
  });

  it('shows feedback success message, and dispatches on dismiss', () => {
    const state = {
      ...baseState,
      amexway: {
        ...baseState.amexway,
        feedback: { showFeedbackMessage: true }
      }
    };
    const store = mockStore(state);
    store.dispatch = jest.fn();

    renderWithStore(store);

    expect(screen.getByTestId('PageLevelMessage-success')).toHaveTextContent('Feedback successfully submitted.');

    // Dismiss
    fireEvent.click(screen.getByTestId('PageLevelMessage-success'));
    expect(store.dispatch).toHaveBeenCalledWith({
      type: 'SET_SHOW_FEEDBACK',
      payload: false,
    });
  });

  it('shows download feedback API error message, and dispatches on dismiss', () => {
    const state = {
      ...baseState,
      amexway: {
        ...baseState.amexway,
        downloadFeedback: {
          ...baseState.amexway.downloadFeedback,
          showApiErrorMessage: true,
        },
      },
    };
    const store = mockStore(state);
    store.dispatch = jest.fn();

    renderWithStore(store);

    expect(screen.getByTestId('PageLevelMessage-warning')).toHaveTextContent(
      'Something went wrong. Please try again after sometime.'
    );

    // Dismiss
    fireEvent.click(screen.getByTestId('PageLevelMessage-warning'));
    expect(store.dispatch).toHaveBeenCalledWith({
      type: 'SET_SHOW_API_DOWNLOAD_ERROR',
      payload: false,
    });
  });

  it('shows download feedback success message, and dispatches on dismiss', () => {
    const state = {
      ...baseState,
      amexway: {
        ...baseState.amexway,
        downloadFeedback: {
          ...baseState.amexway.downloadFeedback,
          showSuccessMessage: true,
        },
      },
    };
    const store = mockStore(state);
    store.dispatch = jest.fn();

    renderWithStore(store);

    expect(screen.getByTestId('PageLevelMessage-success')).toHaveTextContent(
      'Feedback downloaded successfully.'
    );

    // Dismiss
    fireEvent.click(screen.getByTestId('PageLevelMessage-success'));
    expect(store.dispatch).toHaveBeenCalledWith({
      type: 'SET_SHOW_FEEDBACK_DOWNLOAD_SUCCESS_MSG',
      payload: false,
    });
  });

  // You may further add tests for:
  // - The toggling/monthly toggle UI, if it is rendered and it is testable
  // - Passing/handling last updated props to child components
});
