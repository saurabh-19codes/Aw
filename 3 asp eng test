
it('renders export controls tooltip and buttons', () => {
  render(<AxpEngineeringMetricsGridWithFiltersTest isMonthlyToggle={true} />);
  expect(screen.getByTestId('btnExport')).toBeInTheDocument();
  expect(screen.getByTestId('tooltip-default-top')).toBeInTheDocument();
  expect(screen.getByText(/Please select the VP/)).toBeInTheDocument();
});



it('disables export button when filter is not applied', () => {
  render(<AxpEngineeringMetricsGridWithFiltersTest isMonthlyToggle={true} />);
  // Don't click VP/filter buttons
  expect(screen.getByTestId('btnExport')).toBeDisabled();
});



it('enables export button when VP and filter applied', () => {
  render(<AxpEngineeringMetricsGridWithFiltersTest isMonthlyToggle={true} />);
  fireEvent.click(screen.getByTestId('vp-present-button'));
  fireEvent.click(screen.getByTestId('apply-filter-button'));
  expect(screen.getByTestId('btnExport')).not.toBeDisabled();
});



it('shows correct icon and label in the export button in various states', async () => {
  render(<AxpEngineeringMetricsGridWithFiltersTest isMonthlyToggle={true} />);
  // Initial: no spinner, button disabled
  expect(screen.queryByTestId('progress-circle')).not.toBeInTheDocument();
  expect(screen.getByTestId('btnExport')).toBeDisabled();

  // Enable button and simulate loading for icon
  fireEvent.click(screen.getByTestId('vp-present-button'));
  fireEvent.click(screen.getByTestId('apply-filter-button'));
  require('fetche').useFetche.mockImplementation((url) =>
    url.includes('enterpriseDownloadData')
      ? { isLoading: true, data: {}, run: jest.fn() }
      : { isLoading: false, data: mockEnterpriseAnnualViewFilter, run: jest.fn() }
  );
  fireEvent.click(screen.getByTestId('btnExport'));
  expect(await screen.findByTestId('progress-circle')).toBeInTheDocument();
});
