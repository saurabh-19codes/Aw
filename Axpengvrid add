it('should map rawData and apply formatKpi', () => {
  const amexWayApiData = [{
    kpi: '# of Features Closed'
  }];
  useFetchye.mockReturnValue({
    isLoading: false,
    data: {
      body: {
        amexWayApiData,
        amexWayHeader: ['kpi']
      }
    }
  });

  render(<AxpEngineeringMetricsGrid {...props} />);
  // This triggers rawData.map and calls formatKpi
  const table = screen.getByTestId('data-table');
  expect(table).toBeInTheDocument();
  // Ensure the KPI is formatted as expected
  expect(table).toHaveTextContent('Number of features closed');
});
 it('should return empty string for unknown KPI in tooltip', () => {
  useFetchye.mockReturnValue({
    isLoading: false,
    data: {
      body: {
        amexWayApiData: [{ kpi: 'UNKNOWN_KPI' }]
      }
    }
  });

  render(<AxpEngineeringMetricsGrid {...props} />);
  // Find the element that would use the tooltip (with empty string)
  // You might need to adjust the selector based on your actual tooltip rendering
  const table = screen.getByTestId('data-table');
  expect(table).toBeInTheDocument();
  // If you can query the tooltip directly, add assertions here, e.g.:
  // expect(screen.getByTitle('')).toBeInTheDocument();
});
                                                                          it('should generate expanded columns from amexWayDrillDownHeader', async () => {
  // Provide a mock for transformedData.amexWayDrillDownHeader
  const amexWayDrillDownHeader = {
    name: 'Name Column',
    amount: 'Amount Column'
  };
  const amexWayApiData = [
    {
      kpi: 'test',
      drillDown: [
        { name: 'Test 1', amount: 10 }
      ]
    }
  ];
  useFetchye.mockReturnValue({
    isLoading: false,
    data: {
      body: {
        amexWayDrillDownHeader,
        amexWayApiData
      }
    }
  });

  render(<AxpEngineeringMetricsGrid {...props} />);
  // Expand the row by rendering the expand row renderer directly (or simulate expand if UI allows)
  const dataTable = screen.getByTestId('data-table');
  expect(dataTable).toBeInTheDocument();
  // You may want to check for the header text:
  expect(dataTable).toHaveTextContent('Name Column');
  expect(dataTable).toHaveTextContent('Amount Column');
});
