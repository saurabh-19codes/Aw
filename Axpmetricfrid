import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { useDispatch, useSelector } from 'react-redux';
import AxpEngineeringMetricsGrid from 'path-to/AxpEngineeringMetricsGrid';

// Mock dependent modules/components/hook
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));
jest.mock('@americanexpress/one-app-router', () => ({
  withRouter: (Comp) => (props) => <Comp {...props} />,
}));
jest.mock('path-to/LoaderCircle', () => () => <div data-testid="loader" />);
jest.mock('path-to/ModalComponentForFeedback', () => ({ showModal }) => 
  showModal ? <div data-testid="feedback-modal" /> : null
);
jest.mock('path-to/MonthlyTableDataWithDetails', () => () => <div data-testid="monthly-details" />);
jest.mock('path-to/DataTable', () => (props) => (
  <div data-testid="data-table">
    {props.data && props.data.map((row, i) => <div key={i}>{row.kpi}</div>)}
    {props.expandableRows && <div data-testid="expandable-rows" />}
  </div>
));
jest.mock('path-to/AxpExpandColumnRenderer', () => () => <div data-testid="expand-renderer" />);
jest.mock('path-to/useFetch', () => ({
  __esModule: true,
  default: () => ({
    isLoading: false,
    data: {
      body7: {
        amexWayHeader: [],
        amexWayDrillDownHeader: [],
        amexWayData: [
          { kpi: 'TestKPI1', drillDown: [{ kpi: 'SubKPI' }] },
        ],
        lastRefreshDate: '2023-09-01',
        lastUpdatedTime: '2023-09-01T12:00:00Z',
        baseKpiCountData: [],
      },
    },
  }),
}));

describe('AxpEngineeringMetricsGrid', () => {
  let dispatchMock;

  beforeEach(() => {
    // Reset all mocks before each test
    jest.clearAllMocks();
    dispatchMock = jest.fn();
    useDispatch.mockReturnValue(dispatchMock);
    useSelector.mockImplementation((selectorFn) =>
      selectorFn({
        config: {
          oneApiUrl: 'http://mock.api',
        },
      })
    );
  });

  it('renders loader when loading', () => {
    jest.doMock('path-to/useFetch', () => ({
      __esModule: true,
      default: () => ({
        isLoading: true,
        data: {},
      }),
    }));

    render(<AxpEngineeringMetricsGrid handleEnterpriseTimeLastUpdated={jest.fn()} monthlyToggle={false} />);
    expect(screen.getByTestId('loader')).toBeInTheDocument();
  });

  it('renders data-table and header content when not loading', () => {
    render(<AxpEngineeringMetricsGrid handleEnterpriseTimeLastUpdated={jest.fn()} monthlyToggle={false} />);
    expect(screen.getByTestId('data-table')).toBeInTheDocument();
    expect(screen.queryByTestId('loader')).not.toBeInTheDocument();
  });

  it('calls handleEnterpriseTimeLastUpdated if lastRefreshDate is present', () => {
    const handleEnterpriseTimeLastUpdated = jest.fn();
    render(<AxpEngineeringMetricsGrid handleEnterpriseTimeLastUpdated={handleEnterpriseTimeLastUpdated} monthlyToggle={false} />);
    // Simulate your data conditions for this callback.
    // Add assertions for when/why this callback should be fired within your test scenario.
    // Example:
    // expect(handleEnterpriseTimeLastUpdated).toHaveBeenCalledWith('2023-09-01T12:00:00Z');
  });

  it('renders feedback modal when showModal is true', () => {
    // For this, you may need to fire an action that sets showModal true
    render(<AxpEngineeringMetricsGrid handleEnterpriseTimeLastUpdated={jest.fn()} monthlyToggle={false} />);
    // Simulate opening the modal (by clicking or calling setShowModal if exposed)
    // expect(screen.getByTestId('feedback-modal')).toBeInTheDocument();
  });

  it('renders expandable rows', () => {
    render(<AxpEngineeringMetricsGrid handleEnterpriseTimeLastUpdated={jest.fn()} monthlyToggle={false} />);
    expect(screen.getByTestId('expandable-rows')).toBeInTheDocument();
  });

  it('dispatches SET_SHOW_FEEDBACK when feedback is closed', () => {
    // You may directly call a dispatch function here, or simulate the UI event that leads to it.
    // Example:
    // fireEvent.click(screen.getByTestId('close-feedback-btn'));
    // expect(dispatchMock).toHaveBeenCalledWith({ type: 'SET_SHOW_FEEDBACK', payload: false });
  });

  it('renders MonthlyTableDataWithDetails when monthlyToggle is true', () => {
    render(<AxpEngineeringMetricsGrid handleEnterpriseTimeLastUpdated={jest.fn()} monthlyToggle={true} />);
    expect(screen.getByTestId('monthly-details')).toBeInTheDocument();
  });
});
