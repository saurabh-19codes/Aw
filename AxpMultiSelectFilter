import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { AxpMultiSelectFilter } from "./AxpMultiSelectFilter";

// --- Mock react-select ---
jest.mock("react-select", () => ({ options, value, onChange, isMulti, isLoading }) => {
  return (
    <select
      data-testid="mock-select"
      multiple={isMulti}
      disabled={isLoading}
      value={value.map((v) => v.value).join(",")}
      onChange={(e) => {
        let values;
        if (isMulti) {
          // Support comma-separated string for multiple values
          values = e.target.value.split(",").map((val) => ({
            value: val,
            label: val,
          }));
        } else {
          values = [{ value: e.target.value, label: e.target.value }];
        }
        onChange(values);
      }}
    >
      {options.map((opt) => (
        <option key={opt.value} value={opt.value}>
          {opt.label}
        </option>
      ))}
    </select>
  );
});

describe("AxpMultiSelectFilter", () => {
  const mockSetSelected = jest.fn();
  const defaultProps = {
    name: "testFilter",
    label: "Test Label",
    isLoading: false,
    options: ["Option1", "Option2", "Option3"],
    selected: ["Option1"],
    setSelected: mockSetSelected,
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders label and select", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    expect(screen.getByText("Test Label")).toBeInTheDocument();
    expect(screen.getByTestId("mock-select")).toBeInTheDocument();
  });

  it("renders all options", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    expect(select.children).toHaveLength(3);
    expect(select.children[0].textContent).toBe("Option1");
    expect(select.children[1].textContent).toBe("Option2");
  });

  it("preselects values from `selected` prop", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    expect(select.value).toBe("Option1");
  });

  it("calls setSelected on single selection", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");

    fireEvent.change(select, { target: { value: "Option2" } });

    expect(mockSetSelected).toHaveBeenCalledWith(["Option2"]);
  });

  it("handles multiple selections", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");

    fireEvent.change(select, { target: { value: "Option2,Option3" } });

    expect(mockSetSelected).toHaveBeenCalledWith(["Option2", "Option3"]);
  });

  it("disables select when loading", () => {
    render(<AxpMultiSelectFilter {...defaultProps} isLoading />);
    expect(screen.getByTestId("mock-select")).toBeDisabled();
  });

  it("clears selection correctly", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");

    fireEvent.change(select, { target: { value: "" } });

    expect(mockSetSelected).toHaveBeenCalledWith([""]);
  });
});
