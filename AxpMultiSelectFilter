import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import Select from "react-select";
import { AxpMultiSelectFilter } from "./AxpMultiSelectFilter";

// Mock react-select (to simplify testing)
jest.mock("react-select", () => ({ options, value, onChange, isMulti, isLoading }) => {
  return (
    <select
      data-testid="mock-select"
      multiple={isMulti}
      disabled={isLoading}
      value={value.map((v) => v.value)}
      onChange={(e) => {
        const selectedValues = Array.from(e.target.selectedOptions).map((o) => ({
          value: o.value,
          label: o.value,
        }));
        onChange(selectedValues);
      }}
    >
      {options.map((opt) => (
        <option key={opt.value} value={opt.value}>
          {opt.label}
        </option>
      ))}
    </select>
  );
});

describe("AxpMultiSelectFilter", () => {
  const mockSetSelected = jest.fn();
  const defaultProps = {
    name: "testFilter",
    label: "Test Label",
    isLoading: false,
    options: ["Option1", "Option2", "Option3"],
    selected: ["Option1"],
    setSelected: mockSetSelected,
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders the label and select input", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    expect(screen.getByText("Test Label")).toBeInTheDocument();
    expect(screen.getByTestId("mock-select")).toBeInTheDocument();
  });

  it("maps options correctly into select", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    expect(select.children).toHaveLength(3);
    expect(select.children[0].textContent).toBe("Option1");
  });

  it("pre-selects values passed in `selected` prop", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    expect(select.value).toBe("Option1");
  });

  it("calls setSelected when selection changes", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    fireEvent.change(select, { target: { selectedOptions: [{ value: "Option2" }] } });
    expect(mockSetSelected).toHaveBeenCalledWith(["Option2"]);
  });

  it("handles multiple selections", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    fireEvent.change(select, {
      target: { selectedOptions: [{ value: "Option2" }, { value: "Option3" }] },
    });
    expect(mockSetSelected).toHaveBeenCalledWith(["Option2", "Option3"]);
  });

  it("disables the select when isLoading is true", () => {
    render(<AxpMultiSelectFilter {...defaultProps} isLoading />);
    expect(screen.getByTestId("mock-select")).toBeDisabled();
  });

  it("passes empty array when nothing selected", () => {
    render(<AxpMultiSelectFilter {...defaultProps} />);
    const select = screen.getByTestId("mock-select");
    fireEvent.change(select, { target: { selectedOptions: [] } });
    expect(mockSetSelected).toHaveBeenCalledWith([]);
  });
});
